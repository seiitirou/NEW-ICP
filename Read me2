了解しました！
では、前回書いた「展開補正を出力率に内包する理論」をそのまま残しつつ、**全章構成の完全仕様書（README用）**としてまとめ直します。
「非エンジニアでも読めるように」「計算式・コードつきで」「全要素をディープラーニング最適化」という方針で書きます。

⸻

🐎 ICP×GMax 統合版 競馬予測AI 仕様書

⸻

1. 基本コンセプト
	•	本システムは「馬の地力（BasePower） × 出力率（OutputRate）」で当日のパフォーマンスを予測する。
	•	出力は TARGET形式で、以下を表示する：
	•	ICPスコア（予測値）
	•	損益分岐オッズ（その馬が買うべき最低限のオッズライン）

\text{Score}_i = \text{BasePower}_i \times \text{OutputRate}_i

⸻

2. 地力スコア（BasePower）

2.1 定義
	•	馬の「最大能力」を表すスコア。
	•	架空の基準馬（全コース・全距離・全条件で100点）の相対値として算出。

2.2 計算要素
	•	RLS（Race Level Score）：レース全体のレベルを表す
→ 着順・着差・出走馬の過去実績を総合してスコア化
	•	個馬パフォーマンス：
P_{i,r} = \text{標準化タイム} - \text{補正（斤量・馬場・展開）}
	•	最大能力：
\text{BasePower}i = \max{r \in \text{過去レース}} f(P_{i,r}, RLS_r)
	•	高RLSのレースを重視（学習で重み最適化）

2.3 実装ポイント
	•	RLSの基準値は学習で自動調整。
	•	斤量補正は「0.5kg差 ≈ ±補正pt」とし、初期値を入れて学習で修正。
	•	地力は固定的ではなく、学習を通じて徐々に洗練される。

⸻

3. 出力率（OutputRate）

3.1 定義
	•	当日の地力発揮率を表す係数（0〜1程度）。
	•	馬の理想条件からのズレを学習で吸収。

\text{OutputRate}i = \exp\left(
\Delta o{\text{course},i}
+\Delta o_{\text{form},i}
+\Delta o_{\text{bias},i}
+\Delta o_{\text{pace},i}
\right)

⸻

3.2 コース・距離適性補正（Δo_course）
	•	各馬のコース・距離ごとの相性を学習でスコア化。
	•	初出走条件は「類似条件での成績」＋「コース統計」から補完。
	•	例：東京1600m初 → 東京系統実績＋阪神1800m・福島2000mの相関で推定。

⸻

3.3 近走フォーム補正（Δo_form）
	•	直近数戦のトレンドを指数化。
	•	例：連続してRLS上昇 → プラス補正。
	•	逆に「凡走続き」ならマイナス補正。

⸻

3.4 当日バイアス適合補正（Δo_bias）
	•	当日の「脚質有利・不利」「馬場傾向」に対応。
	•	バイアス自体は当日レースの統計から自動検出。
	•	馬ごとにそのバイアス適合度を加点/減点。

⸻

3.5 展開補正（Δo_pace）

（前回詳述の章、再掲＋理想ラップを学習で最適化）
	•	各馬の「理想ラップ」は 高RLS勝利時のラップを元に、学習で潜在ベクトル化。
	•	予測ラップ（LapHead）と理想ラップのズレを測り、減衰させる。
	•	ズレへの耐性（σ）は馬ごとに学習。

\Delta o_{\text{pace},i} = -\theta \cdot D_i^p
	•	ここで
	•	D_i：当日予測ラップと理想ラップの正規化ズレ
	•	θ, p：学習で最適化

要点：各馬の理想ラップそのものも「学習対象」。
→ 初期値は過去勝利ラップ、学習が進むと「その馬が最も力を出せるラップ像」に収束。

⸻

4. 損益分岐オッズ（Break-even Odds）
	•	最終出力スコアを確率換算して算出。
	•	JRA方式の期待値計算で、回収率100%になるラインを「損益分岐オッズ」として出力。

\text{BreakEvenOdds}_i = \frac{1}{\text{WinProb}_i}
	•	WinProbはソフトマックスで算出：
\text{WinProb}_i = \frac{e^{\text{Score}_i}}{\sum_j e^{\text{Score}_j}}

⸻

5. 学習フロー（ディープラーニング）
	1.	入力特徴量
	•	レース情報：コース、距離、天候、RLS
	•	馬情報：過去ラップ系列、成績、馬場適性、脚質
	•	当日予測：オッズ、想定ラップ（展開予測）
	2.	モジュール
	•	BasePower Head：最大能力抽出（RLS重視）
	•	OutputRate Head：出力率計算（補正統合）
	•	LapHead：当日ラップ予測
	•	IdealLap Encoder：理想ラップ表現の学習
	3.	損失関数
	•	予測勝率 vs 実際結果（交差エントロピー）
	•	ラップ予測 vs 実際ラップ（Huber損失）
	•	両者を加重和
	4.	最適化
	•	AdamW + 勾配クリッピング
	•	初期パラメータは仮定値 → 学習で最適化

⸻

6. 出力形式（TARGET互換）
	•	馬番・馬名・ICPスコア・損益分岐オッズのみ表示。
	•	UIは持たず、テキスト出力でTARGETに取り込める形。

例：

馬番  馬名          ICPスコア    損益分岐オッズ
 1   サンプルホース   112.3        3.5
 2   テストホース     105.7        5.8


⸻

7. 全体アーキテクチャ

入力(過去成績/当日情報/予測ラップ/オッズ)
         │
         ▼
   [BasePower Head]───┐
                       │
   [OutputRate Head]───┤──▶ Score = BasePower×OutputRate
                       │
   [LapHead+IdealLap]──┘
         │
         ▼
   Softmax → 勝率 → 損益分岐オッズ
         │
         ▼
     TARGET出力


⸻

8. 実装メモ（Python例）

score_i = base_power[i] * output_rate[i]
win_prob = math.exp(score_i) / sum(math.exp(s) for s in scores)
breakeven_odds = 1 / win_prob


⸻

9. 今後の拡張
	•	複勝・馬連など他式別への応用
	•	強化学習による回収率直接最大化
	•	馬体重・調教時計など追加因子の導入

⸻

✅ この仕様書を README.md にそのまま載せれば、開発者がコード化可能なレベルになっています。
次のステップは「学習用データ構造」と「学習コード雛形」の提示ですが、そこまで含めますか？